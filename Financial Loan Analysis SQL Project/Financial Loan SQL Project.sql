CREATE DATABASE BANK_DATA;

USE Bank_data;

select * from bank_data;

--1).TOTAL LOAN APPLICATIONS
SELECT COUNT(ID) AS TOTAL_LOAN_APPLICATION
FROM BANK_DATA;

--2). TOTAL FUNDED AMOUNT
SELECT ROUND(SUM(LOAN_AMOUNT)/1000000,2) AS "TOTAL_FUNDED_AMOUNT(IN MILLIONS)"
FROM BANK_DATA;

--3). TOTAL PAYMENT RECIEVED
SELECT ROUND(SUM(TOTAL_PAYMENT)/1000000,2) AS "TOTAL_PAYMENT_RECIEVED(IN MILLIONS)"
FROM BANK_DATA;

--4). AVERAGE INTREST RATE AS PER PURPOSE OF LOAN
SELECT PURPOSE, ROUND(AVG(INT_RATE),2) AS "AVG_INT_RATE"
FROM BANK_DATA
GROUP BY PURPOSE;

--5). AVERAGE DTI FOR 2021 FOR ALL THE MONTHS
SELECT YEAR(ISSUE_DATE) AS 'YEAR', MONTH(ISSUE_DATE) AS 'MONTH', ROUND(AVG(DTI),2) AS 'MONTHLY_AVG_DTI'
FROM BANK_DATA
WHERE YEAR(ISSUE_DATE) = 2021
GROUP BY YEAR(ISSUE_DATE), MONTH(ISSUE_DATE);

--6). MONTH OVER MONTH TOTAL AMOUNT RECIEVED
WITH MONTHLYTOTAL AS(
SELECT
	YEAR(ISSUE_DATE) AS 'YEAR',
	MONTH(ISSUE_DATE) AS 'MONTH',
	SUM(TOTAL_PAYMENT) AS 'MONTHLY_TOTAL_PAYMENT_RECIEVED'
	FROM BANK_DATA
	WHERE YEAR(ISSUE_DATE) = 2021
	GROUP BY YEAR(ISSUE_DATE), MONTH(ISSUE_DATE)
),
MONTHOVERMONTH AS (
SELECT
	T1.YEAR,
	T1.MONTH,
	T1.MONTHLY_TOTAL_PAYMENT_RECIEVED,
	T2.MONTHLY_TOTAL_PAYMENT_RECIEVED AS 'PREVIOUS_MONTH_PAYMENT',
	T1.MONTHLY_TOTAL_PAYMENT_RECIEVED - T2.MONTHLY_TOTAL_PAYMENT_RECIEVED AS 'MONTH_OVER_MONTH_PAYMENT'
	FROM MONTHLYTOTAL T1
	LEFT JOIN
	MONTHLYTOTAL T2 
	ON T1.YEAR = T2.YEAR AND T1.MONTH = T2.MONTH + 1
)
SELECT YEAR, MONTH, MONTH_OVER_MONTH_PAYMENT
FROM MONTHOVERMONTH
ORDER BY YEAR, MONTH;

--7). MONTH OVER MONTH AVERAGE INTREST RATE AND I WANT TO ROUND OFF UPTO 2 DECIMAL PLACES
WITH MONTHLYINTRESTRATE AS(
SELECT 
	YEAR(ISSUE_DATE) AS 'YEAR',
	MONTH(ISSUE_DATE) AS 'MONTH',
	ROUND(AVG(INT_RATE)*100, 2) AS 'MONTHLY_AVG_INT_RATE'
	FROM BANK_DATA
	WHERE YEAR(ISSUE_DATE) = 2021
	GROUP BY YEAR(ISSUE_DATE),MONTH(ISSUE_DATE)
),
MONTHOVERMONTHINTRESTRATE AS (
SELECT
	MIR1.YEAR,
	MIR1.MONTH,
	MIR1.MONTHLY_AVG_INT_RATE AS 'CURRENT_MONTH_INT_RATE',
	MIR2.MONTHLY_AVG_INT_RATE AS 'PREVIOUS_MONTH_INT_RATE',
	ROUND((MIR1.MONTHLY_AVG_INT_RATE - MIR2.MONTHLY_AVG_INT_RATE),2) AS 'MONTH_OVER_MONTH_INTREST_RATE'
	FROM MONTHLYINTRESTRATE MIR1
	LEFT JOIN MONTHLYINTRESTRATE MIR2
	ON MIR1.YEAR = MIR2.YEAR AND MIR1.MONTH = MIR2.MONTH + 1
)
SELECT
	YEAR,MONTH, CURRENT_MONTH_INT_RATE, PREVIOUS_MONTH_INT_RATE, MONTH_OVER_MONTH_INTREST_RATE
	FROM MONTHOVERMONTHINTRESTRATE
	ORDER BY YEAR, MONTH;

	


-------------------------------------------------------GOOD LOAN VS BAD LOAN ANALYSIS---------------------------------------------------------------

------GOOD LOAN(WHERE LOAN STATUS IS 'FULLY PAID' OR 'CURRENT')-------

--1).GOOD LOAN APPLICATIONS %
SELECT COUNT(CASE WHEN LOAN_STATUS IN ('FULLY PAID','CURRENT') THEN ID END)*100/ COUNT(ID) AS "GOOD LOAN %"
FROM BANK_DATA;

--2). GOOD LOAN APPLICATIONS
SELECT 
	COUNT(CASE WHEN LOAN_STATUS IN ('FULLY PAID','CURRENT') THEN ID END) AS 'GOOD LOAN APPLICATIONS',
    COUNT(ID) AS 'TOTAL APPLICATIONS'
FROM BANK_DATA;

--3). GOOD LOAN TOTAL AMOUNT RECIEVED
SELECT ROUND(SUM(CASE WHEN LOAN_STATUS IN ('FULLY PAID','CURRENT') THEN TOTAL_PAYMENT END)/1000000,2) AS 'TOTAL_AMOUNT_RECIEVED(in millions)'
FROM BANK_DATA;

------BAD LOAN(WHERE LOAN STATUS IS 'CHARGED OFF')-------

--1).BAD LOAN APPLICATIONS %
SELECT COUNT(CASE WHEN LOAN_STATUS = 'CHARGED OFF' THEN ID END)*100/ COUNT(ID) AS "GOOD LOAN %"
FROM BANK_DATA;

--2). BAD LOAN APPLICATIONS
SELECT 
	COUNT(CASE WHEN LOAN_STATUS  = 'CHARGED OFF' THEN ID END) AS 'GOOD LOAN APPLICATIONS',
    COUNT(ID) AS 'TOTAL APPLICATIONS'
FROM BANK_DATA;

--3). BAD LOAN TOTAL AMOUNT RECIEVED
SELECT ROUND(SUM(CASE WHEN LOAN_STATUS = 'CHARGED OFF' THEN TOTAL_PAYMENT END)/1000000,2) AS 'TOTAL_AMOUNT_RECIEVED(in millions)'
FROM BANK_DATA;